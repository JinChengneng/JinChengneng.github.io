<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>More Than Codes</title>
  
  <subtitle>怕什么真理无穷，进一步有进一步的欢喜。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-18T04:59:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>金成能</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【基础定义】异构数据融合与共享项目基础定义总结</title>
    <link href="http://yoursite.com/2017/11/18/%E3%80%90%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89%E3%80%91%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%9F%BA%E7%A1%80%E5%AE%9A%E4%B9%89%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/18/【基础定义】异构数据融合与共享基础定义总结/</id>
    <published>2017-11-18T04:27:56.000Z</published>
    <updated>2017-11-18T04:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP思想"><a href="#AOP思想" class="headerlink" title="AOP思想"></a>AOP思想</h2><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>这样看来，AOP其实只是OOP的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。如果加上时间维度，AOP使OOP由原来的二维变为三维了，由平面变成立体了。从技术上来说，AOP基本上是通过代理机制实现的。</p><a id="more"></a><p>refs：</p><ul><li><p><a href="https://baike.baidu.com/item/AOP/1332219?fr=aladdin" target="_blank" rel="external">AOP （面向切面编程）</a></p></li><li><p><a href="https://www.zhihu.com/question/24863332" target="_blank" rel="external">什么是面向切面编程AOP？</a></p></li></ul><h2 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h2><ul><li>Consistency(一致性), 数据一致更新，所有数据变动都是同步的</li><li>Availability(可用性), 好的响应性能</li><li>Partition tolerance(分区容错性) 可靠性</li></ul><p>定理：任何分布式系统只可同时满足二点，没法三者兼顾。</p><p>忠告：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。</p><p>refs:</p><ul><li><a href="http://www.jdon.com/37625" target="_blank" rel="external">CAP原理和BASE思想</a></li></ul><h2 id="ACID模型"><a href="#ACID模型" class="headerlink" title="ACID模型"></a>ACID模型</h2><p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p><ul><li>Atomicity 原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。</li><li><p>Consistency 一致性. 一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。</p></li><li><p>Isolation 隔离性. 如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。事务将假定只有它自己在操作数据库，彼此不知晓。</p></li><li>Durability 持久性. 在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><p>refs:</p><ul><li><a href="http://www.jdon.com/37625" target="_blank" rel="external">CAP原理和BASE思想</a></li><li><a href="https://baike.baidu.com/item/acid/10738?fr=aladdin" target="_blank" rel="external">acid （数据库事务正确执行的四个基本要素的缩写）</a></li></ul><h2 id="BASE思想"><a href="#BASE思想" class="headerlink" title="BASE思想"></a>BASE思想</h2><p>BASE模型反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性：</p><ul><li>Basically Available 基本可用。基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。</li><li>Soft state 软状态 状态可以有一段时间不同步，异步。软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。</li><li>Eventually consistent 最终一致，最终数据是一致的就可以了，而不是时时高一致。最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li></ul><p>ACID是传统数据库常用的设计理念，追求强一致性模型。BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。</p><p>ACID和BASE代表了两种截然相反的设计哲学，在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。</p><p>refs:</p><ul><li><a href="http://www.jdon.com/37625" target="_blank" rel="external">CAP原理和BASE思想</a></li><li><a href="http://www.cnblogs.com/exceptioneye/p/5452601.html" target="_blank" rel="external">分布式系统的BASE理论</a></li></ul><h2 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h2><p>ASR：重要的架构需求，会对架构产生深远影响的需求；</p><p>ASR的几种获取方法：需求文档，采访利益相关者，理解商业目标，效应数；</p><h2 id="SOA模型"><a href="#SOA模型" class="headerlink" title="SOA模型"></a>SOA模型</h2><p>面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。</p><p>SOA的精髓是严格的松散耦合，大家按照一个契约（service interface）来进行交流，不允许shared memory，不允许back door，不允许直接访问其它服务的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP思想&quot;&gt;&lt;a href=&quot;#AOP思想&quot; class=&quot;headerlink&quot; title=&quot;AOP思想&quot;&gt;&lt;/a&gt;AOP思想&lt;/h2&gt;&lt;p&gt;AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;p&gt;这样看来，AOP其实只是OOP的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。如果加上时间维度，AOP使OOP由原来的二维变为三维了，由平面变成立体了。从技术上来说，AOP基本上是通过代理机制实现的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【机器学习】</title>
    <link href="http://yoursite.com/2017/11/18/%E3%80%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%91%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E3%80%81%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>http://yoursite.com/2017/11/18/【机器学习】线性分类、线性回归和梯度下降/</id>
    <published>2017-11-18T04:27:56.000Z</published>
    <updated>2018-01-04T05:32:27.350Z</updated>
    
    <content type="html"><![CDATA[<p>$F_{\mu}$<br>$F_a + F_b = F_c$</p><p>$F_a = F_b + F_c + F_{\mu}$</p><p>公式是这样的 <span>$F_a = F_b + F_c + F_{\mu}$</span><!-- Has MathJax -->，你必须理解它，才能看懂下面这些公式：</p><span>$$\begin{aligned}\dot{x} &amp; = \sigma(y-x) \\\dot{y} &amp; = \rho x - y - xz \\\dot{z} &amp; = -\beta z + xy\end{aligned}$$</span><!-- Has MathJax --><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ul><li>进一步理解线性回归和梯度下降的原理。</li><li>在小规模数据集上实践。</li><li>体会优化和调参的过程。</li></ul><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><ul><li>线性回归使用的是LIBSVM Data中的Housing数据，包含506个样本，每个样本有13个属性。请自行下载scaled版本，并将其切分为训练集，验证集。 </li><li>线性分类使用的是LIBSVM Data中的australian数据，包含690个样本，每个样本有14 个属性。请自行下载scaled版本，并将其切分为训练集，验证集。</li></ul><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="线性回归和梯度下降"><a href="#线性回归和梯度下降" class="headerlink" title="线性回归和梯度下降"></a>线性回归和梯度下降</h3><ol><li>读取实验数据，使用sklearn库的load_svmlight_file函数读取数据。</li><li>将数据集切分为训练集和验证集，本次实验不切分测试集。使用train_test_split函数切分数据集。</li><li>线性模型参数初始化，可以考虑全零初始化，随机初始化或者正态分布初始化。<br>选择Loss函数及对其求导，过程详见课件ppt。<br>求得所有样本对Loss函数的梯度。<br>取梯度的负方向，记为。<br>更新模型参数，。为学习率，是人为调整的超参数。<br>在训练集上测试并得到Loss函数值，在验证集上测试并得到Loss函数值。<br>重复步骤5-8若干次，画出和随迭代次数的变化图。<br>$F$</li></ol><p>$$<br>\begin{eqnarray}<br>\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \<br>\nabla\cdot\vec{B} &amp;=&amp; 0 \<br>\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \<br>\nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br>\end{eqnarray}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;$F_{\mu}$&lt;br&gt;$F_a + F_b = F_c$&lt;/p&gt;
&lt;p&gt;$F_a = F_b + F_c + F_{\mu}$&lt;/p&gt;
&lt;p&gt;公式是这样的 &lt;span&gt;$F_a = F_b + F_c + F_{\mu}$&lt;/span&gt;&lt;!-- Has MathJax 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【项目笔记】iGEM wiki项目总结</title>
    <link href="http://yoursite.com/2017/11/08/iGEM-wiki/"/>
    <id>http://yoursite.com/2017/11/08/iGEM-wiki/</id>
    <published>2017-11-08T12:05:14.000Z</published>
    <updated>2017-11-08T11:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>该项目是为SCUT—China_A队伍制作wiki主页。项目比较简单，就是用基本的HTML+CSS+JavaScript写一个网站，大约有20个页面。页面设计是扁平化的极简风格的三栏式布局。项目因为一直没有收到设计稿，项目无法进行，最终在wiki freeze前四天正式开始编码，用时近两天半完成了整个网站的制作。开发过程中基本采用敏捷式开发方法，跟设计组采用流水线的工作形式，迭代开发每一个网页。</p><h2 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h2><p><a href="http://2017.igem.org/Team:SCUT-China_A" target="_blank" rel="external">http://2017.igem.org/Team:SCUT-China_A</a></p><a id="more"></a><h2 id="项目收获"><a href="#项目收获" class="headerlink" title="项目收获"></a>项目收获</h2><ul><li>重新熟悉了基础的前端语法</li><li>所在的队伍极有可能拿到一个国际级奖项</li><li>认识了一群非常可爱而优秀的小伙伴</li></ul><h2 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h2><ul><li>iGEM官方提供了服务器，这减少了搭建网站的工作量，但官方提供的代码编辑器非常难用，而且默认模板样式很诡异，而且会覆盖所提及网页的样式，需要自己再重新把平台覆盖的样式覆盖掉。</li><li>wiki tools平台会先解析一遍上传的代码，并做出一些匪夷所思的更改，比如说把 &amp;&amp; 替换成 &amp;amp ;&amp;amp ;。这个问题怀疑是平台传输代码数据时造成的更改，但一时间难以找到真正原因，所以采取的解决办法就是用嵌套选择语句代替&amp;&amp;语句。</li><li>设计组的设计稿交付不及时，这导致严重的项目赶工情况的发生。编码的那两天半里每天熬夜到三四点，以后一定要催促设计组及时交付文档。</li><li>项目难度不大，但是工作量大，基本是重复性的搬砖工作。所以将图片上传等简单的工作交给其他人来完成，并且教会了一至两个人写简单的HTML代码，这大大减少了我的工作量。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;该项目是为SCUT—China_A队伍制作wiki主页。项目比较简单，就是用基本的HTML+CSS+JavaScript写一个网站，大约有20个页面。页面设计是扁平化的极简风格的三栏式布局。项目因为一直没有收到设计稿，项目无法进行，最终在wiki freeze前四天正式开始编码，用时近两天半完成了整个网站的制作。开发过程中基本采用敏捷式开发方法，跟设计组采用流水线的工作形式，迭代开发每一个网页。&lt;/p&gt;
&lt;h2 id=&quot;项目成果&quot;&gt;&lt;a href=&quot;#项目成果&quot; class=&quot;headerlink&quot; title=&quot;项目成果&quot;&gt;&lt;/a&gt;项目成果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://2017.igem.org/Team:SCUT-China_A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://2017.igem.org/Team:SCUT-China_A&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>robo3t 1.1在ubuntu 16.04中无法打开的解决方案</title>
    <link href="http://yoursite.com/2017/08/10/16-04%E4%B8%AD%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/08/10/16-04中无法打开的解决方案/</id>
    <published>2017-08-10T00:27:56.000Z</published>
    <updated>2017-11-08T11:46:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>robo3t 1.1在ubuntu 16.04中无法打开，具体表现为双击robo3t可执行文件无反应，用终端 ./robo3t 命令报错为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">This application failed to start because it could not find or load the Qt platform plugin &quot;xcb&quot;</div><div class="line">in &quot;&quot;.</div><div class="line"></div><div class="line">Available platform plugins are: xcb.</div><div class="line"></div><div class="line">Reinstalling the application may fix this problem.</div><div class="line">已放弃 (核心已转储)</div></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>删除lib中的libstdc++*</p><a id="more"></a><p> 按顺序执行这三句命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/robo-backup</div><div class="line">mv robo3t-1.1.1-linux-x86_64-c93c6b0/lib/libstdc++* ~/robo-backup/</div><div class="line">robo3t-1.1.1-linux-x86_64-c93c6b0/bin/robo3t</div></pre></td></tr></table></figure><p>即可完美解决该问题</p><p>ref：<a href="https://github.com/Studio3T/robomongo/issues/1385" target="_blank" rel="external">https://github.com/Studio3T/robomongo/issues/1385</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;robo3t 1.1在ubuntu 16.04中无法打开，具体表现为双击robo3t可执行文件无反应，用终端 ./robo3t 命令报错为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;This application failed to start because it could not find or load the Qt platform plugin &amp;quot;xcb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;in &amp;quot;&amp;quot;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Available platform plugins are: xcb.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Reinstalling the application may fix this problem.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;已放弃 (核心已转储)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;删除lib中的libstdc++*&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome更新至58.0后XX.net无法使用，提示“请检查浏览器代理设置”的解决方案</title>
    <link href="http://yoursite.com/2017/05/26/Chrome%E6%9B%B4%E6%96%B0%E8%87%B358-0%E5%90%8EXX-net%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%8F%90%E7%A4%BA%E2%80%9C%E8%AF%B7%E6%A3%80%E6%9F%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/05/26/Chrome更新至58-0后XX-net无法使用，提示“请检查浏览器代理设置”的解决方案/</id>
    <published>2017-05-26T07:24:53.000Z</published>
    <updated>2017-11-05T09:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>chrome 更新至58.0后，部分用户会发现xx-net无法使用，并提示“请检查浏览器代理设置”，且日志中反复出现 con failed（连接失败），解决方法如下：</p><p>1.将xx-net更新至测试版3.3.2或者稳定版3.3.1<br>下载地址： <a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md" target="_blank" rel="external">https://github.com/XX-net/XX-Net/blob/master/code/default/download.md</a><br>2.删除安装文件夹/data/gae_proxy文件夹下的certs文件夹和CA.crt文件<br>3.在Chrome游览器的设置中删除已导入的xx-net的证书，删除方法参考官方文档<a href="https://github.com/XX-net/XX-Net/wiki/%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF" target="_blank" rel="external">https://github.com/XX-net/XX-Net/wiki/%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF</a><br>（删除后，如有必要请重新手动添加证书，不过大多数情况下该步骤都能自动完成）<br>4.检查SwitchyOmega的代理设置（如果没有更改过可跳过该步骤）<br>5.启动xx-net，如无意外，xx-net可正常运行<br>（升级xx-net可能需要重新部署服务端并配置，可参考官方文档<a href="https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids" target="_blank" rel="external">https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids</a> ）</p><p>如有疑问，请留言讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;chrome 更新至58.0后，部分用户会发现xx-net无法使用，并提示“请检查浏览器代理设置”，且日志中反复出现 con failed（连接失败），解决方法如下：&lt;/p&gt;
&lt;p&gt;1.将xx-net更新至测试版3.3.2或者稳定版3.3.1&lt;br&gt;下载地址： &lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode刷题记录】9. Palindrome Number</title>
    <link href="http://yoursite.com/2017/04/26/Number/"/>
    <id>http://yoursite.com/2017/04/26/Number/</id>
    <published>2017-04-26T14:25:30.000Z</published>
    <updated>2017-11-08T11:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h1><p>Determine whether an integer is a palindrome. Do this without extra space.</p><p>这道题目实现并不难，但题目要求空间复杂度为O(1), 有一定的技巧性。</p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions:"></a>Solutions:</h1><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1:"></a>Solution 1:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> palindromeX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> inputX = x;</div><div class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</div><div class="line">            palindromeX = palindromeX*<span class="number">10</span> + (x % <span class="number">10</span>);</div><div class="line">            x = x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> palindromeX==inputX;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>受到LeetCode 7.Reverse Integer 的启发，将原int型的数据完全反转后，比较反转后的数据与原数据是否相同，相同则为回文，反之不是。</p><a id="more"></a><p>Question：这个算法没有考虑到int型数据反转后可能存在的溢出情况，是不是有错误？<br>Answer: 若反转后的数据比原数据大，那么它一定与原数据不相同，肯定不是回文了，所以这个算法隐性地排除了溢出的情况。</p><p>但进一步思考，判断是否为回文需要将整个数字完全反转吗？反转到一半不久可以进行比较了吗？这就引出了Solution 2。</p><!-- more --><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2:"></a>Solution 2:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>|| (x!=<span class="number">0</span> &amp;&amp;x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x&gt;sum)</div><div class="line">        &#123;</div><div class="line">            sum = sum*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">            x = x/<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (x==sum)||(x==sum/<span class="number">10</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这个算法要额外考虑能被10整除的数，需要特别注意。</p><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3:"></a>Solution 3:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">          <span class="comment">//negative number</span></div><div class="line">          <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</div><div class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">              </div><div class="line">          <span class="keyword">int</span> len = <span class="number">1</span>;</div><div class="line">         <span class="keyword">while</span>(x / len &gt;= <span class="number">10</span>)</div><div class="line">             len *= <span class="number">10</span>;</div><div class="line">             </div><div class="line">         <span class="keyword">while</span>(x &gt; <span class="number">0</span>) &#123;  </div><div class="line">             <span class="comment">//get the head and tail number</span></div><div class="line">             <span class="keyword">int</span> left = x / len;</div><div class="line">             <span class="keyword">int</span> right = x % <span class="number">10</span>;</div><div class="line">             </div><div class="line">             <span class="keyword">if</span>(left != right)</div><div class="line">                 <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">             <span class="keyword">else</span>&#123;</div><div class="line">                 <span class="comment">//remove the head and tail number</span></div><div class="line">                 x = (x % len) / <span class="number">10</span>;</div><div class="line">                 len /= <span class="number">100</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;       </div><div class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>解题思路： 每次提取头尾两个数，判断它们是否相等，判断后去掉头尾两个数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h1&gt;&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.&lt;/p&gt;
&lt;p&gt;这道题目实现并不难，但题目要求空间复杂度为O(1), 有一定的技巧性。&lt;/p&gt;
&lt;h1 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h1&gt;&lt;h2 id=&quot;Solution-1&quot;&gt;&lt;a href=&quot;#Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Solution 1:&quot;&gt;&lt;/a&gt;Solution 1:&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; boolean &lt;span class=&quot;title&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; palindromeX = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inputX = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(x&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            palindromeX = palindromeX*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + (x % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x = x/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; palindromeX==inputX;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;受到LeetCode 7.Reverse Integer 的启发，将原int型的数据完全反转后，比较反转后的数据与原数据是否相同，相同则为回文，反之不是。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode刷题记录】7.Reverse Integer</title>
    <link href="http://yoursite.com/2017/04/25/Integer/"/>
    <id>http://yoursite.com/2017/04/25/Integer/</id>
    <published>2017-04-25T12:05:14.000Z</published>
    <updated>2017-11-06T04:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h1><p>Reverse digits of an integer.</p><p>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p><p>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p><p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p><p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p><p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><p>Note:<br>The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p><p>解体思路：这道题目比较简单，难点在于溢出的判断与处理。</p><a id="more"></a><h1 id="Solutions："><a href="#Solutions：" class="headerlink" title="Solutions："></a>Solutions：</h1><h2 id="Solutions-1："><a href="#Solutions-1：" class="headerlink" title="Solutions 1："></a>Solutions 1：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int reverse(int x) &#123;  </div><div class="line">        const int max = 0x7fffffff;  //int最大值  </div><div class="line">        const int min = 0x80000000;  //int最小值  </div><div class="line">        long long sum = 0;   </div><div class="line">          </div><div class="line">        while(x != 0)  </div><div class="line">        &#123;  </div><div class="line">            int temp = x % 10;  </div><div class="line">            sum = sum * 10 + temp;  </div><div class="line">            if (sum &gt; max || sum &lt; min)   //溢出处理  </div><div class="line">            &#123;  </div><div class="line">                sum = sum &gt; 0 ? max : min;    </div><div class="line">                return sum;  </div><div class="line">            &#125;  </div><div class="line">            x = x / 10;  </div><div class="line">        &#125;  </div><div class="line">        return sum;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>将int数据类型能表示的最大值与最小值用十六进制表示出来，虽然有效，但是代码里0x7fffffff这种 hard code 不够优雅，而且容易出错。</p><h2 id="Improved-Solution-1"><a href="#Improved-Solution-1" class="headerlink" title="Improved Solution 1:"></a>Improved Solution 1:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public int reverse(int x) &#123;</div><div class="line">        long rev= 0;</div><div class="line">        while( x != 0)&#123;</div><div class="line">            rev= rev*10 + x % 10;</div><div class="line">            x= x/10;</div><div class="line">            if( rev &gt; Integer.MAX_VALUE || rev &lt; Integer.MIN_VALUE)</div><div class="line">                return 0;</div><div class="line">        &#125;</div><div class="line">        return (int) rev;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>int数据类型能表现的上下限以 Integer.MAX_VALUE 和 Integer.MIN_VALUE 表示，更加优雅简洁。</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2:"></a>Solution 2:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int reverse(int x)</div><div class="line">&#123;</div><div class="line">    int result = 0;</div><div class="line"></div><div class="line">    while (x != 0)</div><div class="line">    &#123;</div><div class="line">        int tail = x % 10;</div><div class="line">        int newResult = result * 10 + tail;</div><div class="line">        if ((newResult - tail) / 10 != result)</div><div class="line">        &#123; return 0; &#125;</div><div class="line">        result = newResult;</div><div class="line">        x = x / 10;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原理： If overflow exists, the new result will not equal to the previous one.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h1&gt;&lt;p&gt;Reverse digits of an integer.&lt;/p&gt;
&lt;p&gt;Example1: x = 123, return 321&lt;br&gt;Example2: x = -123, return -321&lt;/p&gt;
&lt;p&gt;Have you thought about this?&lt;br&gt;Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!&lt;/p&gt;
&lt;p&gt;If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.&lt;/p&gt;
&lt;p&gt;Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?&lt;/p&gt;
&lt;p&gt;For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.&lt;/p&gt;
&lt;p&gt;解体思路：这道题目比较简单，难点在于溢出的判断与处理。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode刷题记录】1.Two Sum解法与Hashmap的应用</title>
    <link href="http://yoursite.com/2017/04/24/Sum%E8%A7%A3%E6%B3%95%E4%B8%8EHashmap%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/24/Sum解法与Hashmap的应用/</id>
    <published>2017-04-24T06:44:59.000Z</published>
    <updated>2017-11-06T04:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].</p><a id="more"></a><h2 id="My-solution"><a href="#My-solution" class="headerlink" title="My solution:"></a>My solution:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] + nums[j] == target &amp;&amp; i!=j)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;i, j&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Runtime：56ms<br>Your runtime beats 9.43% of java submissions.</p></blockquote><p>显然时间复杂度为O(n^2)，耗时太长，不太合理。</p><h2 id="Better-Solutions"><a href="#Better-Solutions" class="headerlink" title="Better Solutions:"></a>Better Solutions:</h2><p>以下为其他人提交的时间复杂度为O(n)的算法。</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//Key is the number and value is its index in the vector.</span></div><div class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line"><span class="keyword">int</span> numberToFind = target - numbers[i];</div><div class="line"></div><div class="line">            <span class="comment">//if numberToFind is found in map, return them</span></div><div class="line"><span class="keyword">if</span> (hash.find(numberToFind) != hash.end()) &#123;</div><div class="line">                    <span class="comment">//+1 because indices are NOT zero based</span></div><div class="line">result.push_back(hash[numberToFind] + <span class="number">1</span>);</div><div class="line">result.push_back(i + <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">            <span class="comment">//number was not found. Put it in the map.</span></div><div class="line">hash[numbers[i]] = i;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</div><div class="line">            result[<span class="number">1</span>] = i + <span class="number">1</span>;</div><div class="line">            result[<span class="number">0</span>] = map.get(target - numbers[i]);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        map.put(numbers[i], i + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Maybe-The-Shorest-Solution"><a href="#Maybe-The-Shorest-Solution" class="headerlink" title="Maybe The Shorest Solution"></a>Maybe The Shorest Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    HashMap&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(target - nums[i])) </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="built_in">map</span>.get(target - nums[i]) + <span class="number">1</span>, i + <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">map</span>.put(nums[i], i);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="为什么要用Hashmap？"><a href="#为什么要用Hashmap？" class="headerlink" title="为什么要用Hashmap？"></a>为什么要用Hashmap？</h1><p>Hashmap根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，为了将时间复杂度降到O(n)，我们使用了Hashmap。</p><h2 id="methods-of-Hashmap"><a href="#methods-of-Hashmap" class="headerlink" title="methods of Hashmap"></a>methods of Hashmap</h2><ul><li>HashMap() <pre><code>构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。</code></pre></li><li>HashMap(int initialCapacity) <pre><code>构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap </code></pre></li><li>HashMap(int initialCapacity, float loadFactor) <pre><code>构造一个带指定初始容量和加载因子的空 HashMap</code></pre></li><li>void    clear() <pre><code>从此映射中移除所有映射关系。</code></pre></li><li>boolean    containsKey(Object key) <pre><code>如果此映射包含对于指定的键的映射关系，则返回 true。</code></pre></li><li>boolean    containsValue(Object value) <pre><code>如果此映射将一个或多个键映射到指定值，则返回 true。</code></pre></li><li>V    put(K key, V value) <pre><code>在此映射中关联指定值与指定键。-</code></pre></li></ul><p>在HashMap中通过get()来获取value，通过put()来插入value，ContainsKey()则用来检验对象是否已经存在。可以看出，和ArrayList的操作相比，HashMap除了通过key索引其内容之外，别的方面差异并不大。</p><p>使用HashMap后，运行速度相比于原来的275ms确实有明显提升</p><blockquote><p>Runtime: 8ms<br>Your runtime beats 56.48% of java submissions. </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h2&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;
&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h2&gt;&lt;p&gt;Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
